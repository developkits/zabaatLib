#ifndef SUBMODEL_H
#define SUBMODEL_H

#include <QObject>
#include <QDebug>
#include <QAbstractListModel>
#include <QJSValue>
#include <QJSValueList>
#include <vector>
#include <QList>
#include "mstimer.h"
#include <QQmlListProperty>


using namespace std;
class submodel : public QAbstractListModel {
    Q_OBJECT
    Q_PROPERTY(QAbstractItemModel *sourceModel READ sourceModel WRITE setSourceModel NOTIFY sourceModelChanged)
    Q_PROPERTY(QList<int> indexList READ indexList WRITE setIndexList NOTIFY indexListChanged)

public:
    submodel(QObject * parent = 0) : QAbstractListModel(parent) { clear() ; }

    QHash<int,QByteArray> roleNames() const {
        if(source == nullptr) {
            QHash<int, QByteArray> roles;
            return roles;
        }else {
            source->roleNames();
        }
    }

    Q_INVOKABLE QList<QString> getRoleNames() {
        QList<QString> r;
        QHash<int,QByteArray> roles = roleNames();
        QHash<int,QByteArray>::iterator i;

        int count = 0;
        for(i = roles.begin(); i != roles.end(); ++i) {
            QByteArray ba = i.value();
            r.append(QString::fromStdString(ba.toStdString()));
            count++;
        }
        qDebug () << "num roles " << count;
        return r;
    }


    QVariant data(const QModelIndex &index, int role) const {
        if(!index.isValid() || source == nullptr || index.row() < 0 || index.row() > indices.length())
            return QVariant();


        int relativeIdx = indices[index.row()];
        if(relativeIdx < 0 || relativeIdx > source->rowCount())
            return QVariant();

        //have to constract a QModelIndex like a boss from our QList
        return source->data(source->index(relativeIdx),role);
    }
    int rowCount(const QModelIndex &parent = QModelIndex()) const { return indices.length() ; }

//    Q_INVOKABLE void append(QVariant obj) { qDebug() << "you've been had haha" ; }
//    Q_INVOKABLE void set(int index, QVariant obj) { qDebug() << "you've been had haha" ; }
    Q_INVOKABLE QVariant get(int idx){
        if(source != nullptr){
            return data(source->index(idx) , Qt::DisplayRole);
        }
        return QVariant();
    }


    QAbstractListModel* sourceModel() { return source; }
    void setSourceModel(QObject *src){
        if(src != source) {
            source = qobject_cast<QAbstractListModel *>(src);
            Q_EMIT sourceModelChanged();
        }
    }


    QList<int> indexList() {
        return indices;
    }
    void setIndexList(QList<int> intArr){
        indices = intArr;
        Q_EMIT indexListChanged();
    }



signals :
    void sourceModelChanged();
    void filterFunctionChanged();
    void indexListChanged();

private:
    QAbstractListModel *source;
    QList<int> indices;

    void clear() {
        source = nullptr;
        indices.clear();

        Q_EMIT sourceModelChanged();
        Q_EMIT indexListChanged();
    }


};


#endif // SUBMODEL_H
